# https://github.com/P3TERX/aria2.conf
# File name: aria2.conf
# Description: Awesome Aria2 configuration file
# Version: 2021.09.15
#
# Copyright (c) 2018-2021 P3TERX
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#

## File Save Settings##

# Download directory. You can use an absolute path or a relative path, default: the current startup location
dir=${HOME}/Downloads

# Disk cache, 0 means disable cache, default: 16M
# The function of disk cache is to temporarily store the downloaded data blocks in memory and then write them to the hard disk in a centralized manner to reduce disk I/O, improve read and write performance, and extend the life of the hard disk.
# It is recommended to increase it appropriately when there is enough free memory, but it should not exceed the remaining available memory space.
# This value only determines the upper limit. The actual memory usage depends on other factors such as network speed (bandwidth) and device performance.
disk-cache=64M

# File preallocation method, optional: none, prealloc, trunc, falloc, default: prealloc
# Pre-allocation can effectively reduce disk fragmentation, improve disk read and write performance, and extend disk life for mechanical hard disks.
# Mechanical hard disks using ext4 (with extended support), btrfs, xfs or NTFS (MinGW compiled version only) are recommended to set to falloc
# If the download fails, the message "fallocate failed.cause: Operation not supported" is displayed, indicating that it is not supported. Please set it to none.
# prealloc allocation speed is slow, trunc has no practical effect, and is not recommended.
# SSDs do not need to be pre-allocated, and it is only recommended to set it to none, otherwise it may cause double file size data to be written, thus affecting lifespan.
file-allocation=none

# File pre-allocation size limit. Files smaller than this option value will not be pre-allocated space, unit K or M, default: 5M
no-file-allocation-limit=64M

# http
continue=true

#Always try to resume downloading from a breakpoint, and terminate the download if it fails. Default: true
always-resume=false

# Does not support URI value for resumable downloads. This is effective when always-resume=false.
# When this value is reached, the download will start from the beginning. When the value is 0, all URIs will be downloaded from the beginning only when they do not support breakpoint resuming.
max-resume-failure-tries=0

# Get server file time, default: false
remote-time=true


## Progress Save Settings##

# Read download tasks from session file
input-file=${HOME}/Downloads/.aria2/aria2.session

#Session file save path
# Aria2 will save `error/incomplete` download tasks to the session file when it exits or at a specified time interval
save-session=${HOME}/Downloads/.aria2/aria2.session

# The interval (in seconds) to save the session after the task status changes. 0 means saving only when the process exits normally. Default: 0
# In order to save the task status in time and prevent the task from being lost, it is recommended to set this value to 1
save-session-interval=1

# The interval (in seconds) for automatically saving task progress to the control file (*.aria2). 0 means saving only when the process exits normally. Default: 60
# This value will also indirectly affect the frequency of writing cached data from memory to disk
# If you want to reduce disk IOPS (number of reads and writes per second), increase the interval time
# If you want to save more download progress when the system exits unexpectedly, reduce the interval time.
# Abnormal exit: process crash, system crash, SIGKILL signal, device power failure, etc.
auto-save-interval=20

# Force save, save information to session file even if the task is completed, default: false
# If enabled, the .aria2 file will be retained after the task is completed. If the file is removed and the task exists, it will be downloaded again after restart.
# The completed task list after shutdown will be cleared after restart.
force-save=false


## Download Connection Settings##

# Number of retries if the file is not found, default: 0 (disabled)
# The number of retries will be recorded at the same time when retrying, so the max-tries option also needs to be set
max-file-not-found=10

# Maximum number of attempts, 0 means unlimited, default: 5
max-tries=0

# Retry wait time (seconds), default: 0 (disabled)
retry-wait=30

# Connection timeout (seconds). Default: 60
connect-timeout=30

# Timeout (seconds). Default: 60
timeout=30

# Maximum number of simultaneous download tasks, modifiable at runtime, default: 5
max-concurrent-downloads=5

# The maximum number of connection threads for a single server, which can be specified when adding a task, default: 1
# The maximum value is 16 (unlimited in enhanced version), and is limited by the value set by the maximum number of connection threads for a single task (split).
max-connection-per-server=16

# Maximum number of connection threads for a single task, can be specified when adding a task, default: 5
split=64

# The minimum segment size of the file, which can be specified when adding, the value range is 1M-1024M (the minimum value of the enhanced version is 1K), default: 20M
# For example, if the value of this item is 10M, when the file is 20MB, it will be divided into two parts and downloaded using two sources. If the file is 15MB, only one source will be used to download.
# Theoretically, the smaller the value, the more download segments are used, the greater the actual number of threads that can be obtained, and the faster the download speed, but it is limited by the policy of the server of the downloaded file.
min-split-size=4M

# HTTP/FTP download segment size. All segments must be multiples of this value. The minimum value is 1M (1K for enhanced version). Default: 1M
piece-length=1M

# Allow shard size to change. Default: false
# false: The download will be aborted when the segment size is different from the control file
# true: Continue downloading after losing some download progress
allow-piece-length-change=true

# Minimum download speed limit. When the download speed is lower than or equal to the value of this option, the connection is closed (the enhanced version is reconnection). This option has nothing to do with BT downloads. Unit K or M, default: 0 (unlimited)
lowest-speed-limit=0

# Global maximum download speed limit, modifiable at runtime, default: 0 (unlimited)
max-overall-download-limit=0

# Single task download speed limit, default: 0 (unlimited)
max-download-limit=0

# Disable IPv6, default: false
disable-ipv6=true

# GZip support, default: false
http-accept-gzip=true

# URI reuse, default: true
reuse-uri=false

# Disable netrc support, default: false
no-netrc=true

# Allow overwriting, when the related control file (.aria2) does not exist, re-download from the beginning. Default: false
allow-overwrite=false

# Automatically rename the file. This option is only valid for HTTP(S)/FTP downloads. The new file name will have a dot and a number (1..9999) after the name and before the extension. Default: true
auto-file-renaming=true

#Use UTF-8 to process Content-Disposition, default: false
content-disposition-default-utf8=true

# Minimum TLS version, optional: TLSv1.1, TLSv1.2, TLSv1.3 Default: TLSv1.2
#min-tls-version=TLSv1.2


## BT/PT download settings##

# BT listening port (TCP), default: 6881-6999
# For devices that are directly connected to the external network, such as VPS, be sure to configure the firewall and security group policy to allow this port to enter
# For devices in the intranet environment, such as NAS, in addition to the firewall settings, you also need to set up the router to forward the external network port to this port
listen-port=51413

# DHT network and UDP tracker listening port (UDP), default: 6881-6999
# Due to different protocols, you can use the same port as the BT listening port to facilitate the configuration of firewalls and port forwarding policies.
dht-listen-port=51413

# Enable IPv4 DHT function, PT download (private seed) will be automatically disabled, default: true
enable-dht=true

# Enable IPv6 DHT function, PT download (private seed) will be automatically disabled, default: false
# Enabling this feature in an environment without IPv6 support may cause DHT to malfunction
enable-dht6=false

# Specify the IP address in BT and DHT network
# Usage scenario: If your home broadband does not have a public IP, you can forward the BT and DHT listening ports to a server with a public IP. Fill in the server IP here to increase the BT download rate.
#bt-external-ip=

# IPv4 DHT file path, default: $HOME/.aria2/dht.dat
dht-file-path=${HOME}/Downloads/.aria2/dht.dat

# IPv6 DHT file path, default: $HOME/.aria2/dht6.dat
dht-file-path6=${HOME}/Downloads/.aria2/dht6.dat

# IPv4 DHT network bootstrap node
dht-entry-point=dht.transmissionbt.com:6881

# IPv6 DHT network bootstrap node
dht-entry-point6=dht.transmissionbt.com:6881

# Local node discovery, PT download (private seed) will be automatically disabled Default: false
bt-enable-lpd=true

#Specify the interface used for local node discovery, possible values: interface, IP address
# If this option is not specified, the default interface is selected.
#bt-lpd-interface=

# Enable node exchange, PT download (private seed) will be automatically disabled, default: true
enable-peer-exchange=true

# Maximum number of connections for BT download (single task), can be modified during runtime. 0 means no limit, default: 55
# Ideally, the more connections, the faster the download. However, in reality, only a small number of seeders connected have fast upload speeds, while the rest upload slowly or do not upload at all.
# If there is no limit, when downloading very popular seeds or a large number of tasks, the process may crash or the network may be blocked due to too many connections.
# Process crash: If the device CPU performance is average and too many connections cause the CPU usage to be too high, the Aria2 process will be forcibly terminated due to insufficient resources.
# Network congestion: In an intranet environment, even if the download does not occupy the full bandwidth, other devices will not be able to access the Internet normally. This is caused by the forwarding performance bottleneck of the ancient low-performance router.
bt-max-peers=128

# BT download expected speed value (single task), can be modified during runtime. Unit: K or M. Default: 50K
# When the BT download speed is lower than this option value, the number of connections will be temporarily increased to obtain a faster download speed, but the premise is that there are more seeders available for connection.
# According to actual measurements, there is no upper limit for temporarily increasing the number of connections, but it will not increase indefinitely as if there is no limit. Reasonable dynamic adjustments will be made based on the algorithm.
bt-request-peer-speed-limit=10M

# Global maximum upload speed limit, modifiable at runtime, default: 0 (unlimited)
# Setting it too low may affect BT download speed
max-overall-upload-limit=2M

# Single task upload speed limit, default: 0 (unlimited)
max-upload-limit=0

# Minimum sharing rate. When the sharing rate of the seed reaches the value set by this option, it will stop seeding. 0 means it will keep seeding. Default: 1.0
# It is strongly recommended that you set this option to greater than or equal to 1.0
seed-ratio=1.0

# Minimum seeding time (minutes). If set to 0, seeding will stop after the BT task download is completed.
seed-time=0

# Check file hash before seeding, default: true
bt-hash-check-seed=true

# When continuing the previous BT task, no need to verify again, default: false
bt-seed-unverified=false

# BT tracker server connection timeout (seconds). Default: 60
# After the connection is established, this option has no effect and the value of the bt-tracker-timeout option will be used
bt-tracker-connect-timeout=10

# BT tracker server timeout (seconds). Default: 60
bt-tracker-timeout=10

# BT server connection interval (seconds). Default: 0 (auto)
#bt-tracker-interval=0

# BT downloads prioritize the beginning or end of the file
bt-prioritize-piece=head=32M,tail=32M

#Save the seed files (.torrent) uploaded via WebUI (RPC), default: true
# It is recommended to enable all options related to seed file saving. Failure to save seed files may result in the risk of task loss.
# Customizing the temporary download directory via RPC may not save torrent files.
rpc-save-upload-metadata=true

# Automatically start downloading seed files (.torrent), default: true, optional: false|mem
# true: save the seed file
# false: only download torrent files
# mem: store the seed in memory
follow-torrent=true

# Pause the task after the seed file is downloaded, default: false
# After turning on the follow-torrent option, downloading a seed file or magnet will automatically start a download task to download. At the same time, when this option is turned on, the relevant task will be created and paused.
pause-metadata=false

#Save magnet link metadata as a torrent file (.torrent), default: false
bt-save-metadata=true

# Load the saved metadata file (.torrent), default: false
bt-load-saved-metadata=true

# Delete unselected files in BT download task, default: false
bt-remove-unselected-file=true

# BT forced encryption, default: false
# After enabling, the old BT handshake protocol will be rejected and only obfuscated handshake and encryption will be used. This can solve the blocking of BT downloads by some operators and has a certain effect in preventing copyright complaints and Thunder bloodsucking.
# This option is equivalent to the shortcut to enable the following two options (bt-require-crypto=true, bt-min-crypto-level=arc4), but it will not modify the values ​​of these two options.
bt-force-encryption=true

# BT encryption requirement, default: false
# If enabled, refuse to establish connections with the old BitTorrent handshake protocol (\19BitTorrent protocol) and always use obfuscated handshake.
#bt-require-crypto=true

# BT minimum encryption level, optional: plain (plain text), arc4 (encrypted), default: plain
#bt-min-crypto-level=arc4

# Separate only for seeding tasks, default: false
# Exclude the tasks that have been downloaded and are being seeded from the tasks being downloaded, and start waiting for the next task in the list.
bt-detach-seed-only=true


## Client masquerade##

# Custom User Agent
user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36 Edg/93.0.961.47

# BT client masquerade
# PT download requires the user-agent and peer-agent parameters to be consistent
# Some PT sites have special blocking mechanisms for Aria2. Client disguise may not be effective and there is a risk of account blocking.
#user-agent=Deluge 1.3.15
peer-agent=Deluge 1.3.15
peer-id-prefix=-DE13F0-


## Execute additional commands##

# Command to execute after download stops
# Triggered when downloading is deleted, errored, or completed. Pause is marked as not starting to download, so it is not related to this item.
on-download-stop=${HOME}/Downloads/.aria2/delete.sh

# Command to execute after download is complete
# If this item is not defined, the command executed after the download stops (on-download-stop)
on-download-complete=${HOME}/Downloads/.aria2/clean.sh

# Command executed after download error
# If this item is not defined, the command executed after the download stops (on-download-stop)
#on-download-error=

# Commands to execute after downloading is paused
#on-download-pause=

# Commands to execute after download starts
#on-download-start=

# Command to execute after BT download is completed
#on-bt-download-complete=


## RPC Settings ##

# Enable JSON-RPC/XML-RPC server, default: false
enable-rpc=true

#Accept all remote requests, default: false
rpc-allow-origin-all=true

# Allow external access, default: false
rpc-listen-all=true

# RPC listening port, default: 6800
rpc-listen-port=6800

# RPC Keys
rpc-secret=TRED

# RPC maximum request size
rpc-max-request-size=10M

# RPC service SSL/TLS encryption, default: false
# After enabling encryption, you must use https or wss protocol to connect
# It is not recommended to enable it. It is recommended to use a web server reverse proxy, such as Nginx and Caddy, which are more flexible.
#rpc-secure=false

# Certificate file (.pem/.crt) when enabling SSL/TLS encryption in the RPC service
#rpc-certificate=${HOME}/Downloads/.aria2/xxx.pem

#Private key file (.key) when SSL/TLS encryption is enabled in the RPC service
#rpc-private-key=${HOME}/Downloads/.aria2/xxx.key

# Event polling method, optional: epoll, kqueue, port, poll, select, different system default values ​​are different
#event-poll=select


## advanced options##

# Enable asynchronous DNS function. Default: true
#async-dns=true

#Specify the asynchronous DNS server list. If not specified, read from /etc/resolv.conf.
#async-dns-server=119.29.29.29,223.5.5.5,8.8.8.8,1.1.1.1

#Specify a single network interface, possible values: interface, IP address, host name
# If the interface has multiple IP addresses, it is recommended to specify the IP address.
# It is known that specifying the network interface will affect functional scenarios that rely on local RPC connections, that is, communication with the Aria2 server cannot be achieved through localhost and 127.0.0.1.
#interface=

# Specify multiple network interfaces. Use commas (,) to separate multiple values.
# This is ignored when the interface option is used.
#multiple-interface=


## Log Settings##

# Log file save path, ignore or set to empty to not save, default: not save
#log=

# Log level, optional debug, info, notice, warn, error. Default: debug
#log-level=warn

# Console log level, optional debug, info, notice, warn, error, default: notice
console-log-level=notice

# Quiet mode, prohibiting log output in the console, default: false
quiet=false

# The download progress summary output interval (in seconds). 0 means output is disabled. Default: 60
summary-interval=0

# Turn off the console progress bar output to avoid printing a large number of blank lines in the log
show-console-readout=false


## Enhanced extension settings (unofficial) ##

# Only applies to enhanced versions built by myfreeer/aria2-build-msys2 (Windows) and P3TERX/Aria2-Pro-Core (GNU/Linux) projects

# Retry when the server returns HTTP 400 Bad Request. Only valid when retry-wait > 0. Default is false.
#retry-on-400=true

# Retry when the server returns HTTP 403 Forbidden. Only valid when retry-wait > 0. Default is false.
#retry-on-403=true

# Retry when the server returns HTTP 406 Not Acceptable. Only valid when retry-wait > 0. Default is false.
#retry-on-406=true

# Retry when the server returns an unknown status code. Only valid when retry-wait > 0. Default is false.
#retry-on-unknown=true

# Whether to send the Want-Digest HTTP header. Default: false (not sent)
# Some websites will use this header as a feature to detect and block Aria2
#http-want-digest=false


## BitTorrent trackers ##
bt-tracker=
